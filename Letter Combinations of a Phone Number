class Solution:
    def letterCombinations(self, digits: str) -> List[str]:

        # if not digits:
        #     return []
        # pattern = {
        #     '2':'abc',
        #     '3':'def',
        #     '4':'ghi',
        #     '5':'jkl',
        #     '6':'mno',
        #     '7':'pqrs',
        #     '8':'tuv',
        #     '9':'wxyz'
        # }
        
        # res = ['']

        # for digit in digits:
        #     temp = []
        #     for combination in res:
        #         for letter in pattern[digit]:
        #             temp.append(combination+letter)
        #     res = temp
        # return res


        if not digits:
            return []
        pattern = {
             '2':'abc',
             '3':'def',
             '4':'ghi',
             '5':'jkl',
             '6':'mno',
             '7':'pqrs',
             '8':'tuv',
             '9':'wxyz'
         }
        n = len(digits)
        res,sol = [],[]
        i = 0

        def backtrack(i):
            if i == n:
                res.append(''.join(sol))
                return 
            for letter in pattern[digits[i]]:
                sol.append(letter)
                backtrack(i+1)
                sol.pop()
        backtrack(0)
        return res

        
